// main.dart
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'screens/home_screen.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Restart GS',
      theme: ThemeData.dark(),
      home: HomeScreen(),
    );
  }
}

// home_screen.dart
import 'package:flutter/material.dart';
import 'service_screen.dart';
import 'inventory_screen.dart';

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Restart GS')),
      body: GridView.count(
        crossAxisCount: 2,
        children: [
          CustomButton('Servis', Icons.build, () {
            Navigator.push(context, MaterialPageRoute(builder: (_) => ServiceScreen()));
          }),
          CustomButton('Magacin', Icons.inventory, () {
            Navigator.push(context, MaterialPageRoute(builder: (_) => InventoryScreen()));
          }),
        ],
      ),
    );
  }
}

class CustomButton extends StatelessWidget {
  final String title;
  final IconData icon;
  final VoidCallback onPressed;

  CustomButton(this.title, this.icon, this.onPressed);

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onPressed,
      child: Card(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, size: 50),
            SizedBox(height: 10),
            Text(title, style: TextStyle(fontSize: 18)),
          ],
        ),
      ),
    );
  }
}

// firebase_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class FirebaseService {
  final CollectionReference serviceCollection = FirebaseFirestore.instance.collection('services');

  Future<void> addService(Map<String, dynamic> data) async {
    await serviceCollection.add(data);
  }

  Future<void> updateService(String id, Map<String, dynamic> data) async {
    await serviceCollection.doc(id).update(data);
  }

  Stream<QuerySnapshot> getServices() {
    return serviceCollection.snapshots();
  }
}

// pdf_service.dart
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'dart:io';
import 'package:path_provider/path_provider.dart';

class PDFService {
  Future<File> generatePDF(List<Map<String, dynamic>> data) async {
    final pdf = pw.Document();
    pdf.addPage(
      pw.Page(
        build: (pw.Context context) => pw.Column(
          children: data.map((entry) => pw.Text(entry['name'])).toList(),
        ),
      ),
    );
    final output = await getTemporaryDirectory();
    final file = File("${output.path}/report.pdf");
    await file.writeAsBytes(await pdf.save());
    return file;
  }
}
